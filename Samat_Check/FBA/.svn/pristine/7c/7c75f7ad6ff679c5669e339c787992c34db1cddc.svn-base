package http

import (
	"strconv"

	"fba/dbmodel"
	"fba/model"

	"github.com/go-openapi/strfmt"

	"github.com/gin-gonic/gin"
)

// swagger:operation GET /inventory Inventory InventoryGET
// Получение списка инвентаризаций
//
// ---
// produces:
// - application/json
// parameters:
// - name: page
//   in: query
//   description: номер страницы пагинатора
//   required: false
//   type: int
// - name: size
//   in: query
//   description: количество записей на странице
//   required: false
//   type: int
// responses:
//   '200':
//     description: JSON массив инвентаризаций
//     schema:
//       type: array
//       items:
//         "$ref": "#/definitions/Inventory"
//   '400':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
func (http *HttpManager) InventoryGET(c *gin.Context) {
	page, err := strconv.Atoi(c.DefaultQuery("page", "0"))
	size, err := strconv.Atoi(c.DefaultQuery("size", "10"))
	Inventorys, err := http.Manager.InventoryGet(size, page)
	if err != nil {
		c.JSON(400, err)
	}
	c.JSON(200, Inventorys)
}

// swagger:operation GET /inventory/{id} Inventory InventoryGETByID
// Получение инвентаризации по ID
//
// ---
// produces:
// - application/json
// parameters:
// - name: id
//   in: path
//   description: идентификатор инвентаризации
//   required: true
//   type: string <uuid4>
// responses:
//   '200':
//     description: JSON модель инвентаризации
//     schema:
//         "$ref": "#/definitions/Inventory"
//   '400':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
func (http *HttpManager) InventoryGETByID(c *gin.Context) {
	id := strfmt.UUID4(c.Param("id"))

	Inventorys, err := http.Manager.InventoryGetByID(id)
	if err != nil {
		c.JSON(400, err)
	}
	c.JSON(200, Inventorys)
}

// swagger:operation POST /inventory Inventory InventoryPOST
// Создание инвентаризации
//
// ---
// produces:
// - application/json
// parameters:
// - name: bodyjson
//   in: body
//   description: JSON для создания инвентаризации
//   required: true
//   schema:
//     "$ref": "#/definitions/Inventory"
// responses:
//   '200':
//     description: JSON созданная модель инвентаризации
//     schema:
//         "$ref": "#/definitions/Inventory"
//   '400':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
//   '500':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
func (http *HttpManager) InventoryPOST(c *gin.Context) {
	ti := c.MustGet("TokenInfo").(model.TokenInfo)
	var Inventory dbModel.Inventory
	if c.Bind(&Inventory) != nil {
		c.JSON(400, "problem decoding body")
		return
	}
	Inventory, err := http.Manager.InventoryCreate(Inventory, ti)
	if err != nil {
		c.JSON(500, err)
		return
	}
	c.JSON(200, Inventory)
	return
}

// swagger:operation PUT /inventory Inventory InventoryPUT
// Изменение инвентаризации
//
// ---
// produces:
// - application/json
// parameters:
// - name: bodyjson
//   in: body
//   description: JSON для изменения модели инвентаризации
//   required: true
//   schema:
//     "$ref": "#/definitions/Inventory"
// responses:
//   '200':
//     description: JSON ответ на изменение инвентаризации
//     schema:
//         "$ref": "#/definitions/Inventory"
//   '400':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
//   '500':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
func (http *HttpManager) InventoryPUT(c *gin.Context) {
	var Inventory dbModel.Inventory
	if c.Bind(&Inventory) != nil {
		c.JSON(400, "problem decoding body")
		return
	}
	if err := http.Manager.InventoryUpdate(Inventory); err != nil {
		c.JSON(500, err)
		return
	}
	c.JSON(200, Inventory)
	return
}

// swagger:operation DELETE /inventory/{id} Inventory InventoryDELETE
// Удаление инвентаризации по ID
//
// ---
// produces:
// - application/json
// parameters:
// - name: id
//   in: path
//   description: идентификатор инвентаризации
//   required: true
//   type: string <uuid4>
// responses:
//   '200':
//     description: Успешное удаление
//     schema:
//         type: string
//   '400':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
//   '500':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
func (http *HttpManager) InventoryDELETE(c *gin.Context) {
	id := strfmt.UUID4(c.Param("id"))

	Inventory, err := http.Manager.InventoryGetByID(id)
	if err != nil {
		c.JSON(400, err)
	}

	if err := http.Manager.InventoryDelete(Inventory); err != nil {
		c.JSON(500, err)
		return
	}
	c.JSON(200, "")
	return
}

// swagger:operation GET /inventories/count Inventory InventoryCount
// Получение количества инвентаризаций
//
// ---
// produces:
// - application/json
// responses:
//   '200':
//     description: JSON с количеством городов
//     schema:
//         "$ref": "#/definitions/Count"
//   '500':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
func (http *HttpManager) InventoryCount(c *gin.Context) {
	count, err := http.Manager.InventoryCount()
	if err != nil {
		c.JSON(500, err)
	}
	c.JSON(200, count)
}
