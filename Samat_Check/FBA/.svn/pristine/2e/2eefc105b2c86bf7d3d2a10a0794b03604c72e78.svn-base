package http

import (
	"strconv"

	"fba/dbmodel"

	"github.com/go-openapi/strfmt"

	"github.com/gin-gonic/gin"
)

// swagger:operation GET /staffpoint StaffPoint StaffPointGET
// Получение списка связок персонала и торговой точки
//
// ---
// produces:
// - application/json
// parameters:
// - name: page
//   in: query
//   description: номер страницы пагинатора
//   required: false
//   type: int
// - name: size
//   in: query
//   description: количество записей на странице
//   required: false
//   type: int
// responses:
//   '200':
//     description: JSON массив связок персонала и торговой точки
//     schema:
//       type: array
//       items:
//         "$ref": "#/definitions/StaffPoint"
//   '400':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
func (http *HttpManager) StaffPointGET(c *gin.Context) {
	page, err := strconv.Atoi(c.DefaultQuery("page", "0"))
	size, err := strconv.Atoi(c.DefaultQuery("size", "10"))
	StaffPoints, err := http.Manager.StaffPointGet(size, page)
	if err != nil {
		c.JSON(400, err)
	}
	c.JSON(200, StaffPoints)
}

// swagger:operation GET /staffpoint/{id} StaffPoint StaffPointGETByID
// Получение связки персонала и торговой точки по ID
//
// ---
// produces:
// - application/json
// parameters:
// - name: id
//   in: path
//   description: идентификатор связки персонала и торговой точки
//   required: true
//   type: string <uuid4>
// responses:
//   '200':
//     description: JSON модель связки персонала и торговой точки
//     schema:
//         "$ref": "#/definitions/StaffPoint"
//   '400':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
func (http *HttpManager) StaffPointGETByID(c *gin.Context) {
	id := strfmt.UUID4(c.Param("id"))

	StaffPoints, err := http.Manager.StaffPointGetByID(id)
	if err != nil {
		c.JSON(400, err)
	}
	c.JSON(200, StaffPoints)
}

// swagger:operation POST /staffpoint StaffPoint StaffPointPOST
// Создание связки персонала и торговой точки
//
// ---
// produces:
// - application/json
// parameters:
// - name: bodyjson
//   in: body
//   description: JSON для создания связки персонала и торговой точки
//   required: true
//   schema:
//     "$ref": "#/definitions/StaffPoint"
// responses:
//   '200':
//     description: JSON созданная модель связки персонала и торговой точки
//     schema:
//         "$ref": "#/definitions/StaffPoint"
//   '400':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
//   '500':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
func (http *HttpManager) StaffPointPOST(c *gin.Context) {
	var StaffPoint dbModel.StaffPoint
	if c.Bind(&StaffPoint) != nil {
		c.JSON(400, "problem decoding body")
		return
	}
	StaffPoint, err := http.Manager.StaffPointCreate(StaffPoint)
	if err != nil {
		c.JSON(500, err)
		return
	}
	c.JSON(200, StaffPoint)
	return
}

// swagger:operation PUT /staffpoint StaffPoint StaffPointPUT
// Изменение связки персонала и торговой точки
//
// ---
// produces:
// - application/json
// parameters:
// - name: bodyjson
//   in: body
//   description: JSON для изменения модели связки персонала и торговой точки
//   required: true
//   schema:
//     "$ref": "#/definitions/StaffPoint"
// responses:
//   '200':
//     description: JSON ответ на изменение связки персонала и торговой точки
//     schema:
//         "$ref": "#/definitions/StaffPoint"
//   '400':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
//   '500':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
func (http *HttpManager) StaffPointPUT(c *gin.Context) {
	var StaffPoint dbModel.StaffPoint
	if c.Bind(&StaffPoint) != nil {
		c.JSON(400, "problem decoding body")
		return
	}
	if err := http.Manager.StaffPointUpdate(StaffPoint); err != nil {
		c.JSON(500, err)
		return
	}
	c.JSON(200, StaffPoint)
	return
}

// swagger:operation DELETE /staffpoint/{id} StaffPoint StaffPointDELETE
// Удаление связки персонала и торговой точки по ID
//
// ---
// produces:
// - application/json
// parameters:
// - name: id
//   in: path
//   description: идентификатор связки персонала и торговой точки
//   required: true
//   type: string <uuid4>
// responses:
//   '200':
//     description: Успешное удаление
//     schema:
//         type: string
//   '400':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
//   '500':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
func (http *HttpManager) StaffPointDELETE(c *gin.Context) {
	id := strfmt.UUID4(c.Param("id"))

	StaffPoint, err := http.Manager.StaffPointGetByID(id)
	if err != nil {
		c.JSON(400, err)
	}

	if err := http.Manager.StaffPointDelete(StaffPoint); err != nil {
		c.JSON(500, err)
		return
	}
	c.JSON(200, "")
	return
}

// swagger:operation GET /staffpoints/count StaffPoint StaffPointCount
// Получение количества связок персонала и торговой точки
//
// ---
// produces:
// - application/json
// responses:
//   '200':
//     description: JSON с количеством связок персонала и торговой точки
//     schema:
//         "$ref": "#/definitions/Count"
//   '500':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
func (http *HttpManager) StaffPointCount(c *gin.Context) {
	count, err := http.Manager.StaffPointCount()
	if err != nil {
		c.JSON(500, err)
	}
	c.JSON(200, count)
}
