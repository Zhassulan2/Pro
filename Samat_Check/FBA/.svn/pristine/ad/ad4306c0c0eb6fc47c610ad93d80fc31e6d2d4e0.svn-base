package http

import (
	"strconv"

	"fba/dbmodel"
	"fba/model"

	"github.com/go-openapi/strfmt"

	"github.com/gin-gonic/gin"
)

// swagger:operation GET /customer Customer CustomerGET
// Получение списка клиентов
//
// ---
// produces:
// - application/json
// parameters:
// - name: page
//   in: query
//   description: номер страницы пагинатора
//   required: false
//   type: int
// - name: size
//   in: query
//   description: количество записей на странице
//   required: false
//   type: int
// responses:
//   '200':
//     description: JSON массив городов
//     schema:
//       type: array
//       items:
//         "$ref": "#/definitions/Customer"
//   '400':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
func (http *HttpManager) CustomerGET(c *gin.Context) {
	page, err := strconv.Atoi(c.DefaultQuery("page", "0"))
	size, err := strconv.Atoi(c.DefaultQuery("size", "10"))
	Customers, err := http.Manager.CustomerGet(size, page)
	if err != nil {
		c.JSON(400, err)
	}
	c.JSON(200, Customers)
}

// swagger:operation GET /customer/{id} Customer CustomerGETByID
// Получение клиента по ID
//
// ---
// produces:
// - application/json
// parameters:
// - name: id
//   in: path
//   description: идентификатор клиента
//   required: true
//   type: string <uuid4>
// responses:
//   '200':
//     description: JSON модель клиента
//     schema:
//         "$ref": "#/definitions/Customer"
//   '400':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
func (http *HttpManager) CustomerGETByID(c *gin.Context) {
	id := strfmt.UUID4(c.Param("id"))

	Customers, err := http.Manager.CustomerGetByID(id)
	if err != nil {
		c.JSON(400, err)
	}
	c.JSON(200, Customers)
}

// swagger:operation POST /customer Customer CustomerPOST
// Создание клиента
//
// ---
// produces:
// - application/json
// parameters:
// - name: bodyjson
//   in: body
//   description: JSON для создания клиента
//   required: true
//   schema:
//     "$ref": "#/definitions/Customer"
// responses:
//   '200':
//     description: JSON созданная модель клиента
//     schema:
//         "$ref": "#/definitions/Customer"
//   '400':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
//   '500':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
func (http *HttpManager) CustomerPOST(c *gin.Context) {
	ti := c.MustGet("TokenInfo").(model.TokenInfo)
	var Customer dbModel.Customer
	if c.Bind(&Customer) != nil {
		c.JSON(400, "problem decoding body")
		return
	}
	Customer, err := http.Manager.CustomerCreate(Customer, ti)
	if err != nil {
		c.JSON(500, err)
		return
	}
	c.JSON(200, Customer)
	return
}

// swagger:operation PUT /customer Customer CustomerPUT
// Изменение клиента
//
// ---
// produces:
// - application/json
// parameters:
// - name: bodyjson
//   in: body
//   description: JSON для изменения модели клиента
//   required: true
//   schema:
//     "$ref": "#/definitions/Customer"
// responses:
//   '200':
//     description: JSON ответ на изменение клиента
//     schema:
//         "$ref": "#/definitions/Customer"
//   '400':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
//   '500':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
func (http *HttpManager) CustomerPUT(c *gin.Context) {
	var Customer dbModel.Customer
	if c.Bind(&Customer) != nil {
		c.JSON(400, "problem decoding body")
		return
	}
	if err := http.Manager.CustomerUpdate(Customer); err != nil {
		c.JSON(500, err)
		return
	}
	c.JSON(200, Customer)
	return
}

// swagger:operation DELETE /customer/{id} Customer CustomerDELETE
// Удаление клиента по ID
//
// ---
// produces:
// - application/json
// parameters:
// - name: id
//   in: path
//   description: идентификатор клиента
//   required: true
//   type: string <uuid4>
// responses:
//   '200':
//     description: Успешное удаление
//     schema:
//         type: string
//   '400':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
//   '500':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
func (http *HttpManager) CustomerDELETE(c *gin.Context) {
	id := strfmt.UUID4(c.Param("id"))

	Customer, err := http.Manager.CustomerGetByID(id)
	if err != nil {
		c.JSON(400, err)
	}

	if err := http.Manager.CustomerDelete(Customer); err != nil {
		c.JSON(500, err)
		return
	}
	c.JSON(200, "")
	return
}

// swagger:operation GET /customers/count Customer CustomerCount
// Получение количества клиентов
//
// ---
// produces:
// - application/json
// responses:
//   '200':
//     description: JSON с количеством клиентов
//     schema:
//         "$ref": "#/definitions/Count"
//   '500':
//     description: JSON ответ об ошибке
//     schema:
//         "$ref": "#/definitions/Error"
func (http *HttpManager) CustomerCount(c *gin.Context) {
	count, err := http.Manager.CustomerCount()
	if err != nil {
		c.JSON(500, err)
	}
	c.JSON(200, count)
}
